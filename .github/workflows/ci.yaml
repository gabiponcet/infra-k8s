name: Provision Infrastructure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install LocalStack CLI
        run: pip install localstack

      - name: Start LocalStack with Docker
        run: |
          export LAMBDA_EXECUTOR=docker
          localstack start -d
        env:
          LAMBDA_EXECUTOR: docker

      - name: Wait for LocalStack
        run: |
          for i in {1..30}; do
            nc -zv localhost 4566 && break
            echo "Waiting for LocalStack to be ready..."
            sleep 10
          done

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Format
        run: terraform fmt -recursive
        working-directory: ./terraform

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1

      - name: Rollback Deployment
        if: failure()
        run: echo "Rolling back deployment"
        working-directory: ./terraform

      - name: Send Discord Failure Notification
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"⚠️ O pipeline falhou! Por favor, verifique os logs para mais detalhes."}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Success Notification
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"✅ O pipeline foi concluído com sucesso!"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Create Deployment
        id: create_deployment
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/deployments \
            -d '{"ref":"${{ github.sha }}","environment":"staging","description":"Deploying to staging environment","transient_environment":true,"production_environment":false}')
          deployment_id=$(echo $response | jq -r '.id')
          echo "deployment_id=$deployment_id" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Staging
        run: echo "Deploying to staging environment"

      - name: Create Deployment Status
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/deployments/${{ env.deployment_id }}/statuses \
            -d '{"state":"success"}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Discord Failure Notification
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"⚠️ O pipeline de staging falhou! Por favor, verifique os logs para mais detalhes."}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Success Notification
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"✅ O pipeline de staging foi concluído com sucesso!"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Create Deployment
        id: create_deployment_prod
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/deployments \
            -d '{"ref":"${{ github.sha }}","environment":"production","description":"Deploying to production environment","transient_environment":false,"production_environment":true}')
          deployment_id=$(echo $response | jq -r '.id')
          echo "deployment_id=$deployment_id" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Production
        run: echo "Deploying to production environment"

      - name: Create Deployment Status
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/deployments/${{ env.deployment_id }}/statuses \
            -d '{"state":"success"}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Discord Failure Notification
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"⚠️ O pipeline de produção falhou! Por favor, verifique os logs para mais detalhes."}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Success Notification
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"✅ O pipeline de produção foi concluído com sucesso!"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}